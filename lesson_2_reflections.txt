==> What happens when you initialize a repository? Why do you need to do it?
It intializes or creates a new git repository. When you initialize a repository, Git doesn't create any commits for you. You'll have to create the first commit yourself.

==> How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is between the working directory and the repository. It's value is that you can use git reset if you change your mind before doing a commit.

==> How can you use the staging area to make sure you have one commit per 
logical change?
You can use git status to see if you have only one logical change before running git commit.

==> What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to keep your master branch for production. It always works. But also want to work on bug fixes or some alternate ways to implement your code or maybe new experiemental features that you don't want to show up in your master branch yet.

==> How do the diagrams help you visualize the branch structure?
You can see where different commits branch off.

==> What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?
The changes in the two branches get merged into one branch. It's represented
in the diagram to show where it split off and where it merged.

==> What are the pros and cons of Git's automatic merging vs. always doing 
merges manually.
The benefit of automatic merging is if you forget, it will be done for you. 
The benefit of doing merging yourself is you have control over what and when to merge.

